using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using Newtonsoft.Json;
using Tiket.Internals;
// ReSharper disable UnusedMember.Global

namespace Tiket
{
    /// <summary>
    /// Use the <see cref="KeyMan"/> to generate keys and to encode/decode claims to/from secure tokens
    /// </summary>
    public class KeyMan : IDisposable
    {
        /// <summary>
        /// Enumeration of claims that have special semantic. KeyMan's claims are inspired by the JWT spec
        /// which can be found at <seealso cref="https://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#RegisteredClaimName"/>,
        /// although they have been simplified a bit
        /// </summary>
        public class Properties
        {
            /// <summary>
            /// ISO8601-encoded time of when the token expires
            /// </summary>
            public const string ExpirationTime = "exp";

            /// <summary>
            /// ID of the principal that issued the token
            /// </summary>
            public const string Issuer = "iss";

            /// <summary>
            /// ID of the principal that is the subject of the token
            /// </summary>
            public const string Subject = "sub";

            /// <summary>
            /// ISO8601-encoded time before which the token must NOT be considered valid
            /// </summary>
            public const string NotBefore = "nbf";

            /// <summary>
            /// ISO8601-encoded time of when the token was issued
            /// </summary>
            public const string IssuedAt = "iat";
        }

        const string PartSeparatorChar = "|";

        /// <summary>
        /// Generates a new key, which includes both public and private keys
        /// </summary>
        public static string GenerateKey() => CryptoInitializer.GenerateNewKey();

        readonly Aes _cryptoServiceProvider;
        readonly Zipper _zipper = new Zipper();
        static readonly Dictionary<string, string> NoProperties = new Dictionary<string, string>();

        /// <summary>
        /// Initializes the key manager using the specified key. A new key can be generated by calling <seealso cref="GenerateKey"/>.
        /// </summary>
        public KeyMan(string key)
        {
            _cryptoServiceProvider = CryptoInitializer.GetFromKey(key);
        }

        /// <summary>
        /// Disposes resources held by the key manager
        /// </summary>
        public void Dispose() => _cryptoServiceProvider.Dispose();

        /// <summary>
        /// Encodes the given properties into a signed token
        /// </summary>
        public string Encode(IDictionary<string, string> properties)
        {
            var clone = Clone(properties);

            clone[Properties.IssuedAt] = DateTimeOffset.Now.ToString("O");

            var jsonText = JsonConvert.SerializeObject(clone);
            var firstPart = Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonText));

            var encodedToken = firstPart
                               + PartSeparatorChar
                               + GenerateSignature(firstPart);

            return Convert.ToBase64String(Encrypt(encodedToken));
        }

        static IDictionary<string, string> Clone(IDictionary<string, string> properties)
        {
            return new Dictionary<string, string>(properties);
        }

        /// <summary>
        /// Decodes the given token, throwing a <seealso cref="CryptographicException"/> if no valid
        /// information could be extracted from it.
        /// </summary>
        public DecodingResult Decode(string token)
        {
            try
            {
                var encodedToken = GetEncodedTokenOrNull(token);

                if (encodedToken == null)
                {
                    return new DecodingResult(NoProperties, new DecodingResultDetails(false, false, false, false));
                }

                var parts = encodedToken.Split(new[] { PartSeparatorChar }, StringSplitOptions.RemoveEmptyEntries);

                if (parts.Length != 2)
                {
                    throw new CryptographicException("Token did not contain the expected number of parts!");
                }

                var properties = Deserialize(parts[0]);
                var hasValidSignature = CanValidateSignature(parts[0], parts[1]);
                var isExpired = IsExpired(properties);
                var isNotValidYet = IsNotValidYet(properties);

                return new DecodingResult(properties, new DecodingResultDetails(hasValidSignature, isExpired, isNotValidYet, true));
            }
            catch (Exception exception)
            {
                throw new CryptographicException("Could not decode token", exception);
            }
        }

        string GetEncodedTokenOrNull(string token)
        {
            try
            {
                return Encoding.ASCII.GetString(_zipper.Unzip(Decrypt(token)));
            }
            catch
            {
                return null;
            }
        }

        byte[] Decrypt(string token)
        {
            var bytes = Convert.FromBase64String(token);

            using (var decryptor = _cryptoServiceProvider.CreateDecryptor())
            using (var destination = new MemoryStream())
            using (var cryptoStream = new CryptoStream(destination, decryptor, CryptoStreamMode.Write))
            {
                cryptoStream.Write(bytes, 0, bytes.Length);
                cryptoStream.FlushFinalBlock();
                return destination.ToArray();
            }
        }

        byte[] Encrypt(string encodedToken)
        {
            var bytes = _zipper.Zip(Encoding.ASCII.GetBytes(encodedToken));

            using (var encryptor = _cryptoServiceProvider.CreateEncryptor())
            using (var destination = new MemoryStream())
            using (var cryptoStream = new CryptoStream(destination, encryptor, CryptoStreamMode.Write))
            {
                cryptoStream.Write(bytes, 0, bytes.Length);
                cryptoStream.FlushFinalBlock();
                return destination.ToArray();
            }
        }

        static bool IsExpired(IDictionary<string, string> properties)
        {
            if (!properties.TryGetValue(Properties.ExpirationTime, out var exp)) return false;
            var expirationTime = DateTimeOffset.ParseExact(exp, "O", CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind);
            return expirationTime < DateTimeOffset.Now;
        }

        static bool IsNotValidYet(IDictionary<string, string> properties)
        {
            if (!properties.TryGetValue(Properties.NotBefore, out var notBefore)) return false;
            var validFromTime = DateTimeOffset.ParseExact(notBefore, "O", CultureInfo.InvariantCulture, DateTimeStyles.RoundtripKind);
            return validFromTime >= DateTimeOffset.Now;
        }

        static Dictionary<string, string> Deserialize(string tokenPart)
        {
            try
            {
                var jsonBytes = Convert.FromBase64String(tokenPart);
                var jsonText = Encoding.UTF8.GetString(jsonBytes);
                return JsonConvert.DeserializeObject<Dictionary<string, string>>(jsonText);
            }
            catch
            {
                throw new CryptographicException("Could not deserialize properties");
            }
        }

        string GenerateSignature(string jsonText)
        {
            using (var hashish = SHA1.Create())
            {
                var jsonBytes = Encoding.UTF8.GetBytes(jsonText);
                using (var inputStream = new MemoryStream(jsonBytes))
                {
                    var hashBytes = hashish.ComputeHash(inputStream);
                    //var digest = Encrypt(Convert.ToBase64String(hashBytes));
                    //var signature = Convert.ToBase64String(digest);
                    var signature = Convert.ToBase64String(hashBytes);
                    return signature;
                }
            }
        }

        bool CanValidateSignature(string jsonText, string signature)
        {
            var generatedSignature = GenerateSignature(jsonText);

            return generatedSignature == signature;
        }
    }
}
